[{"/Users/rishabhgajra/Desktop/Study/Cloud Computing/Uni-CourseWork-Cloud-Project/serverless functions/my-app/src/reportWebVitals.js":"1","/Users/rishabhgajra/Desktop/Study/Cloud Computing/Uni-CourseWork-Cloud-Project/serverless functions/my-app/src/App.js":"2","/Users/rishabhgajra/Desktop/Study/Cloud Computing/Uni-CourseWork-Cloud-Project/serverless functions/my-app/src/index.js":"3","/Users/rishabhgajra/Desktop/Study/Cloud Computing/Uni-CourseWork-Cloud-Project/serverless functions/my-app/src/containers/Homepage/Homepage.js":"4"},{"size":362,"mtime":1606767591359,"results":"5","hashOfConfig":"6"},{"size":203,"mtime":1606768295340,"results":"7","hashOfConfig":"6"},{"size":500,"mtime":1606767591358,"results":"8","hashOfConfig":"6"},{"size":6757,"mtime":1606929659165,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1u19tg4",{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"/Users/rishabhgajra/Desktop/Study/Cloud Computing/Uni-CourseWork-Cloud-Project/serverless functions/my-app/src/reportWebVitals.js",[],"/Users/rishabhgajra/Desktop/Study/Cloud Computing/Uni-CourseWork-Cloud-Project/serverless functions/my-app/src/App.js",["20"],"import logo from './logo.svg';\nimport './App.css';\nimport Homepage from './containers/Homepage/Homepage';\n\nfunction App() {\n  return (\n    <div>\n      <Homepage />\n    </div>\n  );\n}\n\nexport default App;\n","/Users/rishabhgajra/Desktop/Study/Cloud Computing/Uni-CourseWork-Cloud-Project/serverless functions/my-app/src/index.js",[],"/Users/rishabhgajra/Desktop/Study/Cloud Computing/Uni-CourseWork-Cloud-Project/serverless functions/my-app/src/containers/Homepage/Homepage.js",["21"],"import React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { TextField, Button } from '@material-ui/core';\nimport axios from 'axios';\nimport './Homepage.css';\nimport { Puff } from '@agney/react-loading';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nconst options = {\n  scales: {\n    xAxes: [\n      {\n        display: true,\n        scaleLabel: {\n          display: true,\n          labelString: 'Number of words in sentence',\n        },\n      },\n    ],\n    yAxes: [\n      {\n        scaleLabel: {\n          display: true,\n          labelString: 'Number of sentences',\n        },\n        ticks: {\n          beginAtZero: true,\n        },\n      },\n    ],\n  },\n  title: {\n    display: true,\n    text: 'Ditribution of number of words in each sentence.',\n  },\n};\nconst textUrls = [\n  {\n    title: 'Frankenstein by Mary Wollstonecraft Shelley',\n    url: 'http://www.gutenberg.org/files/84/84-0.txt',\n  },\n  {\n    title: 'Pride and Prejudice by Jane Austen',\n    url: 'http://www.gutenberg.org/files/1342/1342-0.txt',\n  },\n  {\n    title: \"Alice's Adventures in Wonderland by Lewis Carroll\",\n    url: 'http://www.gutenberg.org/files/11/11-0.txt',\n  },\n  {\n    title: 'Moby Dick by Herman Melville',\n    url: 'http://www.gutenberg.org/files/2701/2701-0.txt',\n  },\n  {\n    title: 'Dracula by Bram Stoker',\n    url: 'http://www.gutenberg.org/cache/epub/345/pg345.txt',\n  },\n  {\n    title: 'Peter Pan by James M. Barrie',\n    url: 'http://www.gutenberg.org/files/16/16-0.txt',\n  },\n  {\n    title: 'The Republic by Plato',\n    url: 'http://www.gutenberg.org/cache/epub/1497/pg1497.txt',\n  },\n];\nfunction Homepage() {\n  const [datasets, setData] = useState([]);\n  const [label, setLabel] = useState('');\n  const [url, setURL] = useState('');\n  const [loading, setLoading] = useState(false);\n  const sendRequest = () => {\n    setLoading(true);\n    const u = url;\n    setURL('');\n    const l = label;\n    setLabel('');\n    axios\n      .post(\n        `https://us-central1-rishabh-gajra.cloudfunctions.net/cached_data`,\n        {\n          url: u,\n        }\n      )\n      .then((res) => {\n        // console.log(res.data);\n        if (res.data.success == true) {\n          console.log(res.data);\n          updateDataSet(l, Object.values(res.data.frequency));\n          setLoading(false);\n        } else {\n          axios\n            .post(\n              `https://us-central1-rishabh-gajra.cloudfunctions.net/sentence_length`,\n              {\n                url: u,\n              }\n            )\n            .then((res) => {\n              // console.log(res.data.frequency);\n              updateDataSet(l, Object.values(res.data.frequency));\n              setLoading(false);\n            })\n            .catch(function (error) {\n              console.log(error);\n            });\n        }\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  };\n  const autoFunction = (textUrl) => {\n    // setLabel(textUrl.title);\n    // setURL(textUrl.url);\n\n    return !!textUrl.url ? textUrl.url : textUrl;\n  };\n  const updateDataSet = (name, data) => {\n    const red = Math.random() * 255;\n    const blue = Math.random() * 255;\n    const green = Math.random() * 255;\n    const newSet = {\n      label: name,\n      data: data,\n      fill: false,\n      backgroundColor: `rgb(${red}, ${blue}, ${green})`,\n      borderColor: `rgba(${red}, ${blue}, ${green}, 0.2)`,\n    };\n    const oldDatasets = datasets;\n    setData([...oldDatasets, newSet]);\n  };\n  useEffect(() => {\n    console.log(url, label);\n  }, [label, url]);\n  return (\n    <div className=\"body-container\">\n      <div>\n        {loading && (\n          <div className=\"loading\">\n            <Puff width=\"100\" />\n          </div>\n        )}\n        <div className=\"title\">\n          The App parses the plain text from the urls and draws a histogram of\n          the sentence length distribution.\n        </div>\n        <div>\n          Enter a book name and url with text (press enter after pasting a url\n          or else it will get cleared)\n        </div>\n        <br />\n        <div className=\"header\">\n          <TextField\n            placeholder=\"Book name here\"\n            id=\"outlined-basic\"\n            label=\"Book name\"\n            variant=\"outlined\"\n            value={label}\n            style={{ width: 500 }}\n            required={true}\n            onChange={(event) => {\n              setLabel(event.target.value);\n            }}\n          />\n          <Autocomplete\n            // selectOnFocus\n            clearOnBlur\n            handleHomeEndKeys\n            options={textUrls}\n            style={{ width: 500 }}\n            renderOption={(textUrls) =>\n              !!textUrls.title ? textUrls.title : textUrls\n            }\n            getOptionLabel={autoFunction}\n            onChange={(event, newValue) => {\n              // console.log(event, newValue);\n              const l = !!newValue ? newValue.title : '';\n              const u = !!newValue ? newValue.url : '';\n\n              setLabel(l);\n              setURL(u);\n            }}\n            freeSolo={true}\n            onInputChange={(event, newInputValue) => {\n              // console.log(event, newInputValue);\n              setURL(newInputValue.url);\n              setLabel(newInputValue.title);\n            }}\n            renderInput={(params) => (\n              <TextField\n                {...params}\n                placeholder=\"http://www.gutenberg.org/files/1342/1342-0.txt\"\n                id=\"outlined-basic\"\n                label=\"Url\"\n                required={true}\n                variant=\"outlined\"\n                style={{ width: 500 }}\n                value={url}\n                // onChange={(event) => {\n                //   setURL(event.target.value);\n                // }}\n              />\n            )}\n          />\n\n          <Button\n            color=\"secondary\"\n            variant=\"contained\"\n            onClick={() => {\n              sendRequest();\n            }}\n          >\n            Analyse\n          </Button>\n          <Button\n            color=\"secondary\"\n            variant=\"contained\"\n            onClick={() => {\n              setURL('');\n              setLabel('');\n              setData([]);\n            }}\n          >\n            Reset\n          </Button>\n        </div>\n      </div>\n      <div className=\"chart\">\n        <Line\n          data={{\n            labels: [...Array(60).keys()],\n            datasets: datasets,\n          }}\n          options={options}\n        />\n      </div>\n      <div>\n        The app caches results for previous books so try comparing the loading\n        times for a new url vs same url twice, the repeats should be\n        significantly faster.\n      </div>\n    </div>\n  );\n}\n\nexport default Homepage;\n",{"ruleId":"22","severity":1,"message":"23","line":1,"column":8,"nodeType":"24","messageId":"25","endLine":1,"endColumn":12},{"ruleId":"26","severity":1,"message":"27","line":87,"column":30,"nodeType":"28","messageId":"29","endLine":87,"endColumn":32},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]